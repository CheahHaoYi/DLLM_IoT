import numpy as np                                                              
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
import joblib



data = [[466.0, 586.0, 1],[465.0, 569.5, 1],[440.25, 558.0, 1],[711.0, 623.5,0],[673.5, 628.5,0], [469.25, 645.0,1],[473.0, 639.0,1],[473.0, 639.0,1], [629.0, 642.0,2], [634.0, 636.0,2], [623.0, 636.5,2], [643.5, 638.0,2], [615.0, 639.0,2], [647.5, 602.0,0], [644.5, 596.0,0],[630.0, 591.0,0], [681.0, 629.5,0],[673.0, 625.0,0], [682.5, 585.5,0],[722.0, 663.5,0], [721.0, 658.0,0], [709.5, 650.0,0], [712.5, 664.5,0],[667.0, 594.0,0], [596.5, 658.5,2], [599.5, 650.5,2],[588.0, 652.0,2], [569.5, 655.5,2],
        [540.0, 611.0,2],[545.0, 606.0,2],[535.0, 606.5,2],[553.5, 611.0,2],[527.5, 612.0,2],
        [452.75, 572.0,1], [456.0, 581.0,1], [593.5, 618.5,2], [597.0, 613.5,2], [588.5, 614.0, 2], [580.5, 615.0,2],[717.0, 652.5,0],  [715.0, 646.0, 0], [704.5, 643.5, 0],[584.0, 622.0, 2], [588.5, 617.5, 2], [599.0, 618.5,2], [ 504.5, 619.0, 1],[536.5, 619.0,1], [540.0, 614.0,1], [548.5, 614.5, 1], [744.0, 559.0, 0], [748.0, 550.0,0],[764.5, 546.5, 0], [511.0, 669.0,1], [466.0, 574.5,1], [459.75, 562.5,1],
 [510.5, 594.5,1], [513.5, 590.5,1], [507.0, 591.0,1], [519.0, 591.5,1], [502.0, 593.0,1], [768.5, 660.0,2], [646.0, 649.0, 2], [651.0, 643.0, 2], [640.0, 644.0, 2], [631.0, 650.5,2],[480.5, 613.0,1], [484.75, 607.0, 1],[494.5, 611.0, 1],[733.0, 648.5,0],[543.0, 628.5,1],[778.5, 684.0,0], [784.5, 702.0,0],[777.5, 698.5,0], [683.0, 634.0,0],[677.0, 628.0,0], [662.0, 630.0,0],[662.5, 590.5,0], [494.25, 636.0,1], [495.25, 631.0,1],[502.5, 627.5,1], [598.0, 611.5,0], [596.5, 606.0,0], [588.5, 602.0,0],[733.0, 600.5,0],[496.5, 587.5,1]
]
        
 
df = pd.DataFrame(data)

# Display the DataFrame
#print(df)

x = df.iloc[:, 0:2]
y = df.iloc[:, 2]

#print(x)
#print(y)

X_train, X_test, Y_train, Y_test = train_test_split(x, y,test_size = 0.2)

#print(X_test)

clf = DecisionTreeClassifier()
clf.fit(X_train, Y_train)

print(X_test)

predict = clf.predict(X_test)
#test_perf = accuracy_score(Y_test, predict)

Y_test = Y_test.to_numpy()
count = 0

for i in range(len(predict)):
    if (Y_test[i] == predict[i]).all():
        count = count + 1
      
print(count / len(predict))

joblib.dump(clf, "json_model_2.joblib")





